Texture2D    g_Texture;
SamplerState g_Texture_sampler;
Texture2D g_Texture2;
SamplerState g_Texture2_sampler;

struct PSInput
{
    float4 Pos   : SV_POSITION;
    float4 Color : COLOR0;
    float2 Uv : TEX_COORD;
    float4 combine : POSITION1;
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
    out PSOutput PSOut)
{

   float2 uv = PSIn.Uv;

    float3 fcol = float3(0,0,0);


    fcol = g_Texture.Sample(g_Texture_sampler,PSIn.Uv).rgb;

    fcol = fcol * PSIn.combine.x;

    fcol = fcol + g_Texture2.Sample(g_Texture2_sampler,PSIn.Uv).rgb * PSIn.combine.y; 

    PSOut.Color = float4(fcol,1.0);
}

//
Texture2D    g_Texture;
SamplerState g_Texture_sampler;

struct PSInput
{
    float4 Pos   : SV_POSITION;
    float4 Color : COLOR0;
    float2 Uv : TEX_COORD;
    float4 blur : COLOR1;
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
    out PSOutput PSOut)
{

   float2 uv = PSIn.Uv;

    float3 fcol = float3(0,0,0);

    int samples =0;
    for(int y=-5;y<5;y++){
        for(int x=-5;x<5;x++){

            float2 nuv = uv;
            nuv.x=nuv.x+(float)x*PSIn.blur.x;
            nuv.y=nuv.y+(float)y*PSIn.blur.x;
            fcol = fcol + g_Texture.Sample(g_Texture_sampler,nuv).rgb;
            samples++;

        }
    }

    float sf = (float)samples;
    sf = sf / 1.5f;

    fcol = fcol / sf;

   //float3 fcol = g_Texture.Sample(g_Texture_sampler,PSIn.Uv).rgb;
   //fcol.r =0;



    PSOut.Color = float4(fcol,1.0);
}

//
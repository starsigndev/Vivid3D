#define dx 1.0

Texture2D    g_Textures;
SamplerState g_Textures_sampler;
Texture2D g_Normals;
SamplerState g_Normals_sampler;
Texture2D g_Positions;
SamplerState g_Positions_sampler;
TextureCube g_Shadow;
SamplerState g_Shadow_sampler;


struct PSInput
{
    float4 Pos   : SV_POSITION;
    float4 Color : COLOR0;
    float2 Uv : TEX_COORD;
    float3 lightPos : POSITION1;
    float3 lightDiff : POSITION2;
    float3 lightProps : POSITION3;
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

static const float3 sampleOffsetDirections[20] = {
   float3( dx,  dx,  dx), float3( dx, -dx,  dx), float3(-dx, -dx,  dx), float3(-dx,  dx,  dx), 
   float3( dx,  dx, -dx), float3( dx, -dx, -dx), float3(-dx, -dx, -dx), float3(-dx,  dx, -dx),
   float3( dx,  dx,  0), float3( dx, -dx,  0), float3(-dx, -dx,  0), float3(-dx,  dx,  0),
   float3( dx,  0,  dx), float3(-dx,  0,  dx), float3( dx,  0, -dx), float3(-dx,  0, -dx),
   float3( 0,  dx,  dx), float3( 0, -dx,  dx), float3( 0, -dx, -dx), float3( 0,  dx, -dx)
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
    out PSOutput PSOut)
{

    float3 wPos = g_Positions.Sample(g_Positions_sampler,PSIn.Uv).xyz;
    float3 wNorm = g_Normals.Sample(g_Normals_sampler,PSIn.Uv).xyz;

    wNorm = -1.0 + wNorm * 2.0;

    float3 lDir = normalize(PSIn.lightPos - wPos);

     float diff = max(dot(lDir, wNorm),0.0);

    float3 col = g_Textures.Sample(g_Textures_sampler,PSIn.Uv).rgb;
    

    //shadow
      float3 fragToLight = wPos - PSIn.lightPos;

    float currentDepth = distance(wPos,PSIn.lightPos);

    float shadowVal = 0;
    int samples = 20;
  float diskRadius = 0.005f;
    float bias = 0.005;
    shadowVal = 0;
      currentDepth = currentDepth / PSIn.lightProps.x;
    for(int i=0;i<samples;i++){

    float closestDepth = g_Shadow.Sample(g_Shadow_sampler,normalize(fragToLight)+sampleOffsetDirections[i] * diskRadius).r;
    
    

  

    if( (currentDepth-0.01)>closestDepth)
    {

        shadowVal +=1.0f;
        

    }
    }

    shadowVal = shadowVal / (float)samples;
    shadowVal = 1.0 - shadowVal;

    PSOut.Color = (float4(col,1.0) * float4(diff,diff,diff,1.0) * float4(PSIn.lightDiff,1.0))*(0.2+shadowVal);
}

//
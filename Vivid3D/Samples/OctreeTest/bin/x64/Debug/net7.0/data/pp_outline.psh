Texture2D    g_Texture;
SamplerState g_Texture_sampler;

struct PSInput
{
    float4 Pos   : SV_POSITION;
    float4 Color : COLOR0;
    float2 Uv : TEX_COORD;
    float4 outline : POSITION2;
    float4 outlineColor : COLOR1;

};

struct PSOutput
{
    float4 Color : SV_TARGET;
};


float geto(float2 uv,float2 move,float d)
{

    float depth1 = g_Texture.Sample(g_Texture_sampler,uv).r;
    float depth2 = g_Texture.Sample(g_Texture_sampler,uv+move).r;

    float diff = abs(depth2-depth1);

    if(diff>d){
        return 1;
    }else{
        return 0;
    }



}

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
    out PSOutput PSOut)
{

    float inc = PSIn.outline.y;

    float4 o_col = float4(0,1,0,1);

    float4 fcol;

    float d1 = geto(PSIn.Uv,float2(-inc,0),PSIn.outline.x);
    float d2 = geto(PSIn.Uv,float2(inc,0),PSIn.outline.x);
    float d3 = geto(PSIn.Uv,float2(0,-inc),PSIn.outline.x);
    float d4 = geto(PSIn.Uv,float2(0,inc),PSIn.outline.x);

    if(d1>0 || d2>0 || d3>0 || d4>0)
    {

        fcol.rgb = PSIn.outlineColor.rgb;
fcol.a = 1.0;
    }else{

        fcol.rgb = 0;
        fcol.a = 0;

    }

    

    PSOut.Color = fcol;
}

//
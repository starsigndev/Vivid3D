Texture2D    g_Texture;
SamplerState g_Texture_sampler;

struct PSInput
{
    float4 Pos   : SV_POSITION;
    float4 Color : COLOR0;
    float2 Uv : TEX_COORD;
    float4 gr_const : COLOR1;
    float4 sun_pos : POSITION1;
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
    out PSOutput PSOut)
{

    float expo = PSIn.gr_const.x;
    float decay = PSIn.gr_const.y;
    float den = PSIn.gr_const.z;
    float weight = PSIn.gr_const.w;


    int num_samples=120;

    float2 tc = PSIn.Uv;

    float2 deltaTC = (tc-PSIn.sun_pos.xy);
    deltaTC *= 1.0/(float)num_samples;
    float idecay = 1.0f;


     float2 uv = PSIn.Uv;

    float3 fcol = float3(0,0,0);

    float4 godRayColor = g_Texture.Sample(g_Texture_sampler,tc)*0.4;

    for(int i=0;i<num_samples;i++){

        tc-=deltaTC;
        float4 samp = g_Texture.Sample(g_Texture_sampler,tc)*0.4;
        samp*=idecay*weight;
        godRayColor+=samp;
        idecay*=decay;


    }

    fcol.rgb = godRayColor.rgb * expo;

    PSOut.Color = float4(fcol,1.0);
}

//